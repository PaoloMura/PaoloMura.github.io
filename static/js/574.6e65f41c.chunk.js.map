{"version":3,"file":"static/js/574.6e65f41c.chunk.js","mappings":"yIAgEA,UA9DA,WACI,OACI,iCACI,waAMA,gaAMA,sZAKA,SAAC,IAAK,CAACA,OAAK,EAACC,IAAI,wCACjB,qMAIA,mWAMA,SAAC,IAAK,CAACD,OAAK,EAACC,IAAI,+CACjB,8JAIA,2BACI,wDACA,yIACA,2FACA,wIACA,qHAEJ,oPAIA,2BACI,wFACA,yFACA,mHACA,yFAEJ,SAAC,IAAK,CAACD,OAAK,EAACC,IAAI,wCACjB,kMAMZ,C","sources":["Projects/SignDetector.js"],"sourcesContent":["import { Image } from 'react-bootstrap';\n\nfunction SignDetector() {\n    return (\n        <>\n            <p>\n                This project was the coursework for my third year Image Processing and Computer Vision unit.\n                The task was to create a \"No Entry\" sign detector.\n                We were allowed to use OpenCV's classifier training application with the Viola-Jones face detector algorithm.\n                Beyond this, we had to implement our own methods using C++ and limited OpenCV functionality to extend this detector and improve performance.\n            </p>\n            <p>\n                To measure performance, I used the true positive rate (TPR) and F1-score.\n                In the context of sign detection, TPR tells us how many signs the algorithm correctly identified.\n                F1-score is a metric that also takes the false positives into account (i.e. the number of times the detector falsely tells us there's a sign when there actually isn't).\n                Both metrics range from 0 (poor) to 1 (great).\n            </p>\n            <p>\n                The Viola-Jones detector works by using a feature (a simple pattern that it looks for in an image).\n                If there's a region within the image that closely resembles this feature, it considers it a match and detects this region as being a No Entry sign.\n                I used OpenCV's classifier training application to determine the best feature to use, based on a small set of labelled test data.\n            </p>\n            <Image fluid src='/images/sign-detector/Result1.jpeg' />\n            <p>\n                The red boxes indicate the ground truth (where I manually chose what constituted a No Entry sign).\n                The green boxes indicate what the detector output as a No Entry sign.\n            </p>\n            <p>\n                By itself, the Viola-Jones detector gave poor performance.\n                The TPR was ~0.35, likely due to the limited training data set.\n                The F1-score was ~0.22 because of a large number of instances where it detected a region with a horizontal bar.\n                In other words, the feature was too simplistic and was picking up a lot of false positives.\n            </p>\n            <Image fluid src='/images/sign-detector/HoughTransform.jpeg' />\n            <p>\n                I then implemented my own version of the Hough Transform algorithm, adapted for circle detection.\n                The algorithm works as follows:\n            </p>\n            <ol>\n                <li>Given an original image X.</li>\n                <li>Create a new image Y, drawing pixels whenever there's a significant change in colour (i.e. draw the edges).</li>\n                <li>Draw lines perpendicular to the gradient of these edge lines.</li>\n                <li>Find pixels where a significant number of these lines intersect; it's likely to be the centre of a circle.</li>\n                <li>Claim that you've found a circle here and draw a bounding box on the original image.</li>\n            </ol>\n            <p>\n                I also created another simple detection layer that determined if the colour ratio red:white was approximately as expected for No Entry signs.\n                Finally, I combined these three algorithms together in the following way:\n            </p>\n            <ol>\n                <li>Check if the Viola-Jones detector finds a possible sign X.</li>\n                <li>Check if the Hough Circle detector finds a possible sign Y.</li>\n                <li>If (X and Y are in the same region) and (the colour ratio is good) then return found.</li>\n                <li>If (Y) and (the colour ratio is good) then return found.</li>\n            </ol>\n            <Image fluid src='/images/sign-detector/Result2.jpeg' />\n            <p>\n                Although not perfect, the results were much better, with a TPR of ~0.61 and F1-score of ~0.67.\n                The number of false positives were almost completely reduced to zero.\n            </p>\n        </>\n    );\n}\n\nexport default SignDetector;"],"names":["fluid","src"],"sourceRoot":""}