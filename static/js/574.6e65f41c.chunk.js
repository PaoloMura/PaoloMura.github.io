"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[574],{4574:function(e,t,i){i.r(t);var o=i(2592),s=i(184);t.default=function(){return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("p",{children:'This project was the coursework for my third year Image Processing and Computer Vision unit. The task was to create a "No Entry" sign detector. We were allowed to use OpenCV\'s classifier training application with the Viola-Jones face detector algorithm. Beyond this, we had to implement our own methods using C++ and limited OpenCV functionality to extend this detector and improve performance.'}),(0,s.jsx)("p",{children:"To measure performance, I used the true positive rate (TPR) and F1-score. In the context of sign detection, TPR tells us how many signs the algorithm correctly identified. F1-score is a metric that also takes the false positives into account (i.e. the number of times the detector falsely tells us there's a sign when there actually isn't). Both metrics range from 0 (poor) to 1 (great)."}),(0,s.jsx)("p",{children:"The Viola-Jones detector works by using a feature (a simple pattern that it looks for in an image). If there's a region within the image that closely resembles this feature, it considers it a match and detects this region as being a No Entry sign. I used OpenCV's classifier training application to determine the best feature to use, based on a small set of labelled test data."}),(0,s.jsx)(o.Z,{fluid:!0,src:"/images/sign-detector/Result1.jpeg"}),(0,s.jsx)("p",{children:"The red boxes indicate the ground truth (where I manually chose what constituted a No Entry sign). The green boxes indicate what the detector output as a No Entry sign."}),(0,s.jsx)("p",{children:"By itself, the Viola-Jones detector gave poor performance. The TPR was ~0.35, likely due to the limited training data set. The F1-score was ~0.22 because of a large number of instances where it detected a region with a horizontal bar. In other words, the feature was too simplistic and was picking up a lot of false positives."}),(0,s.jsx)(o.Z,{fluid:!0,src:"/images/sign-detector/HoughTransform.jpeg"}),(0,s.jsx)("p",{children:"I then implemented my own version of the Hough Transform algorithm, adapted for circle detection. The algorithm works as follows:"}),(0,s.jsxs)("ol",{children:[(0,s.jsx)("li",{children:"Given an original image X."}),(0,s.jsx)("li",{children:"Create a new image Y, drawing pixels whenever there's a significant change in colour (i.e. draw the edges)."}),(0,s.jsx)("li",{children:"Draw lines perpendicular to the gradient of these edge lines."}),(0,s.jsx)("li",{children:"Find pixels where a significant number of these lines intersect; it's likely to be the centre of a circle."}),(0,s.jsx)("li",{children:"Claim that you've found a circle here and draw a bounding box on the original image."})]}),(0,s.jsx)("p",{children:"I also created another simple detection layer that determined if the colour ratio red:white was approximately as expected for No Entry signs. Finally, I combined these three algorithms together in the following way:"}),(0,s.jsxs)("ol",{children:[(0,s.jsx)("li",{children:"Check if the Viola-Jones detector finds a possible sign X."}),(0,s.jsx)("li",{children:"Check if the Hough Circle detector finds a possible sign Y."}),(0,s.jsx)("li",{children:"If (X and Y are in the same region) and (the colour ratio is good) then return found."}),(0,s.jsx)("li",{children:"If (Y) and (the colour ratio is good) then return found."})]}),(0,s.jsx)(o.Z,{fluid:!0,src:"/images/sign-detector/Result2.jpeg"}),(0,s.jsx)("p",{children:"Although not perfect, the results were much better, with a TPR of ~0.61 and F1-score of ~0.67. The number of false positives were almost completely reduced to zero."})]})}}}]);
//# sourceMappingURL=574.6e65f41c.chunk.js.map